/*
 * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

package org.wso2.carbon.identity.application.template.mgt.dao.impl;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.wso2.carbon.database.utils.jdbc.JdbcTemplate;
import org.wso2.carbon.database.utils.jdbc.exceptions.DataAccessException;
import org.wso2.carbon.identity.application.template.mgt.ApplicationTemplateMgtDBQueries;
import org.wso2.carbon.identity.application.template.mgt.IdentityApplicationTemplateMgtException;
import org.wso2.carbon.identity.application.template.mgt.dao.ApplicationTemplateDAO;
import org.wso2.carbon.identity.application.template.mgt.dto.SpTemplateDTO;
import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
import org.wso2.carbon.identity.application.template.mgt.util.JdbcUtils;
import org.wso2.carbon.utils.multitenancy.MultitenantConstants;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

/**
 * Default implementation of {@link ApplicationTemplateDAO}. This handles {@link SpTemplateDTO} related db layer operations.
 */
public class ApplicationTemplateDAOImpl implements ApplicationTemplateDAO {

    private static final Log log = LogFactory.getLog(ApplicationTemplateDAOImpl.class);

    public ApplicationTemplateDAOImpl() {
    }

    @Override
    public void createApplicationTemplate(SpTemplateDTO spTemplateDTO, String tenantDomain)
            throws IdentityApplicationTemplateMgtException {

        if (log.isDebugEnabled()) {
            log.debug(String.format("Creating application template: %s in tenant %s", spTemplateDTO.getName(),
                    tenantDomain));
        }

        int tenantID = getTenantID(tenantDomain);
        String templateName = spTemplateDTO.getName();
        String templateDescription = spTemplateDTO.getDescription();

        try {
            JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();
            jdbcTemplate.executeInsert(ApplicationTemplateMgtDBQueries.ADD_SP_TEMPLATE,
                    (preparedStatement -> {
                        preparedStatement.setInt(1, tenantID);
                        preparedStatement.setString(2, templateName);
                        preparedStatement.setString(3, templateDescription);
                        preparedStatement.setCharacterStream(4, new StringReader(spTemplateDTO.getSpContent()));
                    }), null, true);

        /*Connection connection = IdentityDatabaseUtil.getDBConnection();
        PreparedStatement storeAppTemplatePrepStmt = null;
        ResultSet results = null;

        try {
            String dbProductName = connection.getMetaData().getDatabaseProductName();
            storeAppTemplatePrepStmt = connection.prepareStatement(
                    ApplicationTemplateMgtDBQueries.ADD_SP_TEMPLATE, new String[]{
                            DBUtils.getConvertedAutoGeneratedColumnName(dbProductName, "ID")});

            storeAppTemplatePrepStmt.setInt(1, tenantID);
            storeAppTemplatePrepStmt.setString(2, templateName);
            storeAppTemplatePrepStmt.setString(3, templateDescription);
            storeAppTemplatePrepStmt.setCharacterStream(4, new StringReader(spTemplateDTO.getSpContent()));
            storeAppTemplatePrepStmt.execute();

            if (!connection.getAutoCommit()) {
                connection.commit();
            }*/
            if (log.isDebugEnabled()) {
                log.debug("Application Template Stored successfully with name " + templateName);
            }
        } catch (DataAccessException e) {
            throw new IdentityApplicationTemplateMgtException("Error while Creating Application Template\"", e);
        } /*catch (SQLException e) {
            try {
                if (connection != null) {
                    connection.rollback();
                }
            } catch (SQLException sql) {
                throw new IdentityApplicationTemplateMgtException(
                        "Error while Creating Application Template", sql);
            }
            throw new IdentityApplicationTemplateMgtException("Error while Creating Application Template", e);
        } finally {
            IdentityDatabaseUtil.closeAllConnections(connection, results, storeAppTemplatePrepStmt);
        }*/
    }

    @Override
    public SpTemplateDTO loadApplicationTemplate(String templateName, String tenantDomain)
            throws IdentityApplicationTemplateMgtException {

        /*if (log.isDebugEnabled()) {
            log.debug(String.format("Loading application template: %s of tenant %s", templateName, tenantDomain));
        }

        int tenantID = getTenantID(tenantDomain);

        *//*Connection connection = IdentityDatabaseUtil.getDBConnection();
        PreparedStatement loadAppTemplatePrepStmt = null;
        SpTemplateDTO spTemplateDTO = null;
        ResultSet results = null;*//*

        try {
           *//* JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();

            jdbcTemplate.executeQuery(ApplicationTemplateMgtDBQueries.LOAD_SP_TEMPLATE_CONTENT,
                    (resultSet, i) -> {
                        SpTemplateDTO spTemplateDTO = new SpTemplateDTO();
                        StringBuilder sb = new StringBuilder();
                        BufferedReader br = new BufferedReader(
                                resultSet.getCharacterStream(1));
                        String line;
                        while ((line = br.readLine()) != null) {
                            sb.append(line).append("\r\n");
                        }
                        String spContent = sb.toString();
                        spTemplateDTO.setName(templateName);
                        spTemplateDTO.setSpContent(spContent);
                        return spTemplateDTO;
                    }, preparedStatement ->
                    {
                        preparedStatement.setString(1, templateName);
                        preparedStatement.setInt(2, tenantID);
                    });*//*
            *//*loadAppTemplatePrepStmt = connection.prepareStatement(
                    ApplicationTemplateMgtDBQueries.LOAD_SP_TEMPLATE_CONTENT);

            loadAppTemplatePrepStmt.setString(1, templateName);
            loadAppTemplatePrepStmt.setInt(2, tenantID);

            try (ResultSet applicationTemplateResultSet = loadAppTemplatePrepStmt
                    .executeQuery()) {
                if (!connection.getAutoCommit()) {
                    connection.commit();
                }
                if (applicationTemplateResultSet.next()) {
                    spTemplateDTO = new SpTemplateDTO();

                    try {
                        StringBuilder sb = new StringBuilder();
                        BufferedReader br = new BufferedReader(
                                applicationTemplateResultSet.getCharacterStream(1));
                        String line;
                        while ((line = br.readLine()) != null) {
                            sb.append(line).append("\r\n");
                        }
                        String spContent = sb.toString();
                        spTemplateDTO.setName(templateName);
                        spTemplateDTO.setSpContent(spContent);
                    } catch (IOException e) {
                        throw new IdentityApplicationTemplateMgtException(
                                "Could not read the template information for : " + templateName, e);
                    }
                }
            }*//*
            if (log.isDebugEnabled()) {
                log.debug("Application Template Loaded successfully with name " + templateName);
            }
        }*//*catch (DataAccessException e) {
            throw new IdentityApplicationTemplateMgtException("Error while Loading Application Template", e);
        }catch (IOException e) {
            throw new IdentityApplicationTemplateMgtException(
                    "Could not read the template information for : " + templateName, e);
        }*//* *//*catch (SQLException e) {
            try {
                if (connection != null) {
                    connection.rollback();
                }
            } catch (SQLException sql) {
                throw new IdentityApplicationTemplateMgtException(
                        "Error while Loading Application Template", sql);
            }
            throw new IdentityApplicationTemplateMgtException("Error while Loading Application Template", e);
        } finally {
            IdentityDatabaseUtil.closeAllConnections(connection, results, loadAppTemplatePrepStmt);
        }*//*
return spTemplateDTO;*/
        return null;
    }

    @Override
    public boolean isExistingTemplate(String templateName, String tenantDomain) throws IdentityApplicationTemplateMgtException {

        if (log.isDebugEnabled()) {
            log.debug(String.format("Checking application template exists for name: %s in tenant: %s", templateName,
                    tenantDomain));
        }
        JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();
        int tenantID = getTenantID(tenantDomain);

        try {
            jdbcTemplate.fetchSingleRecord(ApplicationTemplateMgtDBQueries.IS_SP_TEMPLATE_EXISTS, (resultSet, rowNumber) -> {
                        if (resultSet.next()) {
                            return true;
                        }
                        return false;
                    },
                    preparedStatement -> {
                        preparedStatement.setString(1, templateName);
                        preparedStatement.setInt(2, tenantID);
                    });
        } catch (DataAccessException e) {
            e.printStackTrace();
        }
        return false;

        /*Connection connection = IdentityDatabaseUtil.getDBConnection();
        PreparedStatement isAppTemplateExistsPrepStmt = null;
        boolean isTemplateExists = false;
        ResultSet results = null;

        try {
            isAppTemplateExistsPrepStmt = connection.prepareStatement(
                    ApplicationTemplateMgtDBQueries.IS_SP_TEMPLATE_EXISTS);

            isAppTemplateExistsPrepStmt.setString(1, templateName);
            isAppTemplateExistsPrepStmt.setInt(2, tenantID);

            try (ResultSet isTemplateExistsResultSet = isAppTemplateExistsPrepStmt
                    .executeQuery()) {
                if (!connection.getAutoCommit()) {
                    connection.commit();
                }
                if (isTemplateExistsResultSet.next()) {
                    isTemplateExists = true;
                }
            }
            if (log.isDebugEnabled()) {
                log.debug("Application Template Loaded successfully with name " + templateName);
            }
        } catch (SQLException e) {
            try {
                if (connection != null) {
                    connection.rollback();
                }
            } catch (SQLException sql) {
                throw new IdentityApplicationTemplateMgtException(
                        "Error while checking existence of Application Template", sql);
            }
            throw new IdentityApplicationTemplateMgtException("Error while checking existence of Application Template",
                    e);
        } finally {
            IdentityDatabaseUtil.closeAllConnections(connection, results, isAppTemplateExistsPrepStmt);
        }
        return isTemplateExists;*/
    }

    @Override
    public List<SpTemplateDTO> getAllApplicationTemplates(String tenantDomain)
            throws IdentityApplicationTemplateMgtException {

        if (log.isDebugEnabled()) {
            log.debug(String.format("Getting all the application templates of tenant: %s", tenantDomain));
        }

        int tenantID = getTenantID(tenantDomain);
        List<SpTemplateDTO> spTemplateDTOList = new ArrayList<>();

       JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();

        try {
            spTemplateDTOList = jdbcTemplate.executeQuery(ApplicationTemplateMgtDBQueries.GET_ALL_SP_TEMPLATES,
                    (resultSet, rowNumber) -> new SpTemplateDTO (resultSet.getString(1),
                        resultSet.getString(2), resultSet.getString(3)),
                    preparedStatement ->
                        preparedStatement.setInt(1, tenantID)
                       );
        } catch (DataAccessException e) {
            e.printStackTrace();
        }
        return spTemplateDTOList;


        /*Connection connection = IdentityDatabaseUtil.getDBConnection();
        PreparedStatement getAllAppTemplatePrepStmt = null;
        List<SpTemplateDTO> spTemplateDTOList = new ArrayList<>();
        ResultSet results = null;

        try {
            getAllAppTemplatePrepStmt = connection.prepareStatement(
                    ApplicationTemplateMgtDBQueries.GET_ALL_SP_TEMPLATES);

            getAllAppTemplatePrepStmt.setInt(1, tenantID);

            try (ResultSet getAllAppTemplateResultSet = getAllAppTemplatePrepStmt
                    .executeQuery()) {
                if (!connection.getAutoCommit()) {
                    connection.commit();
                }

                while (getAllAppTemplateResultSet.next()) {
                    SpTemplateDTO spTemplateDTO = new SpTemplateDTO();
                    spTemplateDTO.setName(getAllAppTemplateResultSet.getString(1));
                    spTemplateDTO.setDescription(getAllAppTemplateResultSet.getString(2));
                    spTemplateDTO.setSpContent(getAllAppTemplateResultSet.getString(3));
                    spTemplateDTOList.add(spTemplateDTO);
                }
            }
            if (log.isDebugEnabled()) {
                log.debug("All Application Templates retrieved successfully for tenant domain " + tenantDomain);
            }

        } catch (SQLException e) {
            try {
                if (connection != null) {
                    connection.rollback();
                }
            } catch (SQLException sql) {
                throw new IdentityApplicationTemplateMgtException("Error while Loading Application Templates", sql);
            }
            throw new IdentityApplicationTemplateMgtException("Error while Loading Application Templates", e);
        } finally {
            IdentityDatabaseUtil.closeAllConnections(connection, results, getAllAppTemplatePrepStmt);
        }
        return spTemplateDTOList;*/
    }

    @Override
    public List<String> getAllApplicationTemplateNames(String tenantDomain)
            throws IdentityApplicationTemplateMgtException {

        if (log.isDebugEnabled()) {
            log.debug(String.format("Getting all the application template names of tenant: %s", tenantDomain));
        }

        int tenantID = getTenantID(tenantDomain);

       /* Connection connection = IdentityDatabaseUtil.getDBConnection();
        PreparedStatement getAllAppTemplateNamesPrepStmt = null;
        List<String> spTemplateNames = new ArrayList<>();
        ResultSet results = null;*/
        List<String> spTemplateNames;

        try {
            JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();
            spTemplateNames = jdbcTemplate.executeQuery(ApplicationTemplateMgtDBQueries.GET_ALL_SP_TEMPLATES,
                    (resultSet, i) -> resultSet.getString(1),
                    preparedStatement -> preparedStatement.setInt(1, tenantID));
            /*getAllAppTemplateNamesPrepStmt = connection.prepareStatement(
                    ApplicationTemplateMgtDBQueries.GET_ALL_SP_TEMPLATE_NAMES);

            getAllAppTemplateNamesPrepStmt.setInt(1, tenantID);

            try (ResultSet getAllAppTemplateNamesResultSet = getAllAppTemplateNamesPrepStmt
                    .executeQuery()) {
                if (!connection.getAutoCommit()) {
                    connection.commit();
                }

                while (getAllAppTemplateNamesResultSet.next()) {
                    spTemplateNames.add(getAllAppTemplateNamesResultSet.getString(1));
                }
            }*/
            if (log.isDebugEnabled()) {
                log.debug("All Application Template names retrieved successfully for tenant domain " + tenantDomain);
            }

        } /*catch (SQLException e) {
            try {
                if (connection != null) {
                    connection.rollback();
                }
            } catch (SQLException sql) {
                throw new IdentityApplicationTemplateMgtException("Error while Loading Application Template names",
                        sql);
            }
            throw new IdentityApplicationTemplateMgtException("Error while Loading Application Template names", e);
        } finally {
            IdentityDatabaseUtil.closeAllConnections(connection, results, getAllAppTemplateNamesPrepStmt);
        }*/
        catch (DataAccessException e) {
            throw new IdentityApplicationTemplateMgtException("Error while Loading Application Template names", e);
        }
        return spTemplateNames;
    }

    @Override
    public void deleteApplicationTemplate(String templateName, String tenantDomain) throws IdentityApplicationTemplateMgtException {

        if (log.isDebugEnabled()) {
            log.debug(String.format("Deleting Application Template: %s", templateName));
        }

        int tenantID = getTenantID(tenantDomain);
        JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();
        try {
            jdbcTemplate.executeUpdate(ApplicationTemplateMgtDBQueries.DELETE_SP_TEMPLATE_BY_NAME,
                    preparedStatement -> {
                        preparedStatement.setString(1, templateName);
                        preparedStatement.setInt(2, tenantID);
            });
        } catch (DataAccessException e) {
            String errorMessege = "An error occurred while delete the application template : " + templateName;
            log.error(errorMessege, e);
            throw new IdentityApplicationTemplateMgtException(errorMessege, e);
        }

        /*int tenantID = getTenantID(tenantDomain);

        Connection connection = IdentityDatabaseUtil.getDBConnection();

        // Now, delete the application
        PreparedStatement deleteTemplatePrepStmt = null;
        try {
            deleteTemplatePrepStmt = connection
                    .prepareStatement(ApplicationTemplateMgtDBQueries.DELETE_SP_TEMPLATE_BY_NAME);
            deleteTemplatePrepStmt.setString(1, templateName);
            deleteTemplatePrepStmt.setInt(2, tenantID);
            deleteTemplatePrepStmt.execute();

            if (!connection.getAutoCommit()) {
                connection.commit();
            }

        } catch (SQLException e) {
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ignore) {
                }
            }
            String errorMessege = "An error occurred while delete the application template : " + templateName;
            log.error(errorMessege, e);
            throw new IdentityApplicationTemplateMgtException(errorMessege, e);
        } finally {
            IdentityDatabaseUtil.closeAllConnections(connection, null, deleteTemplatePrepStmt);
        }*/
    }

    @Override
    public void updateApplicationTemplate(SpTemplateDTO spTemplateDTO, String tenantDomain)
            throws IdentityApplicationTemplateMgtException {

        if (log.isDebugEnabled()) {
            log.debug(String.format("Updating Application Template: %s", spTemplateDTO.getName()));
        }

        int tenantID = getTenantID(tenantDomain);
        JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();
        try {
            jdbcTemplate.executeUpdate(ApplicationTemplateMgtDBQueries.UPDATE_SP_TEMPLATE_BY_NAME,
                    preparedStatement -> {
                        preparedStatement.setCharacterStream(1, new StringReader(spTemplateDTO.getSpContent()));
                        preparedStatement.setString(2, spTemplateDTO.getName());
                        preparedStatement.setInt(3, tenantID);
                    });
        } catch (DataAccessException e) {
            String errorMessege = "An error occurred while update the application template : " + spTemplateDTO.getName();
            log.error(errorMessege, e);
            throw new IdentityApplicationTemplateMgtException(errorMessege, e);
        }

        /*int tenantID = getTenantID(tenantDomain);

        Connection connection = IdentityDatabaseUtil.getDBConnection();

        // Now, delete the application
        PreparedStatement updateTemplatePrepStmt = null;
        try {
            updateTemplatePrepStmt = connection
                    .prepareStatement(ApplicationTemplateMgtDBQueries.UPDATE_SP_TEMPLATE_BY_NAME);
            updateTemplatePrepStmt.setCharacterStream(1, new StringReader(spTemplateDTO.getSpContent()));
            updateTemplatePrepStmt.setString(2, spTemplateDTO.getName());
            updateTemplatePrepStmt.setInt(3, tenantID);
            updateTemplatePrepStmt.execute();

            if (!connection.getAutoCommit()) {
                connection.commit();
            }

        } catch (SQLException e) {
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ignore) {
                }
            }
            String errorMessege = "An error occurred while update the application template : " + spTemplateDTO.getName();
            log.error(errorMessege, e);
            throw new IdentityApplicationTemplateMgtException(errorMessege, e);
        } finally {
            IdentityDatabaseUtil.closeAllConnections(connection, null, updateTemplatePrepStmt);
        }*/
    }

    private int getTenantID(String tenantDomain) {

        // get logged-in users tenant identifier.
        int tenantID = MultitenantConstants.INVALID_TENANT_ID;

        if (tenantDomain != null) {
            tenantID = IdentityTenantUtil.getTenantId(tenantDomain);
        }
        return tenantID;
    }
}
